# make a toy dataset
cats <- data.frame(coat = c("calico", "black", "tabby"),
weight = c(2.1, 5.0,3.2),
likes_string = c(1, 0, 1))
#and write it out to our repo
write.csv(x = cats, file = "data/feline-data.csv", row.names = FALSE)
cats
cats$weight
cats$likes_string
# add a column
ages <- c(2,3,5)
cbind(cats, age)
# add a column
age <- c(2,3,5)
cbind(cats, age)
#this one looks different because it's a factor
cats$coat
# we can do math on the columns
## Say we discovered that the scale weighs two Kg light:
cats$weight + 2
cats$weight
# paste let's you format output
paste("My cat is", cats$coat)
#sometimes your math doesn't make sense
cats$weight + cats$coat
cats2
# this makes the csv that is assumed in the lesson
cats2 <- cats + tabby,2.3 or 2.4,1
# read in a new kitty data file and take a look at
# the weight
cats <- read.csv(file="data/feline-data_v2.csv")
typeof(cats$weight)
# intentional error: you can't do math on this anymore
cats$weight + 2
cats
# read in a new kitty data file and take a look at
# the weight
cats <- read.csv(file="data/feline-data_v2.csv")
typeof(cats$weight)
# intentional error: you can't do math on this anymore
cats$weight + 2
typeof(cats$weight)
class(cats)
cats <- read.csv(file="data/feline-data.csv")
# put the original file back into cats
cats <- read.csv(file="data/feline-data.csv")
class(cats)
# make a vector
my_vector <- vector(length = 3)
my_vector
# declase data types when you create a vector
another_vector <- vector(mode='character', length=3)
another_vector
str(cats$weight)
cats
# then 'bind' the vector to a column in your data frame
cbind(cats, age)
#adding a row
# another intentional error
newRow <- list("tortoiseshell", 3.3, TRUE, 9)
cats <- rbind(cats, newRow)
cats
# What's a factor?
levels(cats$coat)
# so to add a row, if there's to be a new value in a vector columns,
# first you need to add that value as a possibility:
levels(cats$coat) <- c(levels(cats$coat), "tortoiseshell")
# now you can add your rows
cats <- rbind(cats, list("tortoiseshell", 3.3, TRUE, 9))
cats
# alternately, you can force the vector colume to be a list instead
cats$coat <- as.character(cats$coat)
str(cats)
levels(cats$coat)
# remove a row
cats[-4, ]
cats
# the previous 2 lines is just calling them.
# it's not changing the dataframe.
# you need to reassign your values:
na.omit(cats)
cats
# the previous 2 lines is just calling them.
# it's not changing the dataframe.
# you need to reassign your values:
cats <- na.omit(cats)
cats
# drop?
drop <- names(cats) %in% c("age")
cats[,!drop]
cats
cats[,!drop]
cats
drop
cats
drop
typeof(drop)
drop
# re-read your datafile
cats <- read.csv(file="data/feline-data.csv")
# adding a column
# first make a vector (all one type!)
age <- c(2,3,5)
# then 'bind' the vector to a column in your data frame
cbind(cats, age)
#adding a row
# another intentional error. But this one is a only warning
# and the row gets added, except for the coat.
# this error introduces Factors
newRow <- list("tortoiseshell", 3.3, TRUE, 9)
cats <- rbind(cats, newRow)
# so to add a row, if there's to be a new value in a vector columns,
# first you need to add that value as a possibility:
levels(cats$coat) <- c(levels(cats$coat), "tortoiseshell")
# now you can add your rows
cats <- rbind(cats, list("tortoiseshell", 3.3, TRUE, 9))
# drop?
drop <- names(cats) %in% c("age")
drop
cats
# re-read your datafile
cats <- read.csv(file="data/feline-data.csv")
# adding a column
# first make a vector (all one type!)
age <- c(2,3,5)
# then 'bind' the vector to a column in your data frame
cbind(cats, age)
# so to add a row, if there's to be a new value in a vector columns,
# first you need to add that value as a possibility:
levels(cats$coat) <- c(levels(cats$coat), "tortoiseshell")
# now you can add your rows
cats <- rbind(cats, list("tortoiseshell", 3.3, TRUE, 9))
cats
# adding a column
# first make a vector (all one type!)
age <- c(2,3,5)
# then 'bind' the vector to a column in your data frame
cbind(cats, age)
# adding a column
# first make a vector (all one type!)
age <- c(2,3,5)
# then 'bind' the vector to a column in your data frame
cbind(cats, age)
cats
# intentional error: too many observations!
age <- c(2, 3, 5, 12)
cbind(cats, age)
# drop?
drop <- names(cats) %in% c("age")
cats
cats[,!drop]
# intentional error: too many observations!
age <- c(2, 3, 5, 12)
cbind(cats, age)
#drop is a logical vector with 3 nulls
#but that line drops the column -- the next one doesn't?
cats[,!drop]
cats
# intentional error: too many observations!
age <- c(2, 3, 5, 12)
cbind(cats, age)
cats[,!drop]
cbind(cats, age)
# appending to a dataframe
# bind 2 dataframes togethers (or one to itself)
cats <- rbind(cats, cats)
cats
# appending to a dataframe
# bind 2 dataframes togethers (or one to itself)
cats <- rbind(cats, cats)
cats
#generic sequence
df <- data.frame(id = c("a", "b", "c"),
x = 1:3,
y = c(TRUE, TRUE, FALSE),
stringsAsFactors = FALSE)
df
challenge
#specific answer
challenge <- data.frame(id = c("firstname", "lastname", "luckynum"),
x = 1:3,
y = c(Jon, Jabłoński, 13),
stringsAsFactors = FALSE)
#specific answer
challenge <- data.frame(id = c("firstname", "lastname", "luckynum"),
x = 1:3,
y = c('Jon', 'Jabłoński', 13),
stringsAsFactors = FALSE)
challenge
challenge <- data.frame(firstname = 'Jon',
lastname = 'Jabłoński',
luckynum = 13,
stringsAsFactors = FALSE)
challenge
challenge <- rbind('Kim', 'Uher', 5)
challenge
#right
challenge <- data.frame(firstname = 'Jon',
lastname = 'Jabłoński',
luckynum = 13,
stringsAsFactors = FALSE)
challenge
challenge <- rbind(challenge, 'Kim', 'Uher', 5)
challenge
#right
challenge <- data.frame(firstname = 'Jon',
lastname = 'Jabłoński',
luckynum = 13,
stringsAsFactors = FALSE)
challenge <- data.frame(firstname = 'Jon',
lastname = 'Jabłoński',
luckynum = 13,
stringsAsFactors = FALSE)
challenge
kim <- list(Kim, Uher, 5)
challenge <- rbind(challenge, kim)
kim <- list('Kim', 'Uher', 5)
challenge <- rbind(challenge, kim)
challenge
challenge <- data.frame(firstname = 'Jon',
lastname = 'Jabłoński',
luckynum = 13,
stringsAsFactors = FALSE)
kim <- list('Kim', 'Uher', 5)
pam <- list('Pam', 'Kunz', 7839)
challenge <- rbind(challenge, kim)
challenge <- rbind(challenge, pam)
challenge
coffee <- (TRUE)
cbind(challenge, coffee)
# get the gapminder
download.file("https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_data.csv", destfile = "data/gapminder_data.csv")
gapminder <- read.csv("data/gapminder_data.csv")
#examine it
str(gapminder)
summary(gapminder$country)
# What's a factor?
# they're stored as integers -- but they can change!
typeof(cats$coats)
str(cats$coats)
# re-read your datafile
cats <- read.csv(file="data/feline-data.csv")
# What's a factor?
# they're stored as integers -- but they can change!
typeof(cats$coats)
cats
# What's a factor?
# they're stored as integers -- but they can change!
typeof(cats$coats)
# What's a factor?
# they're stored as integers -- but they can change!
typeof(cats$coat)
str(cats$coat)
# how big?
length(gapminder)
dim(cats)
dim(gapminder)
# variable names
colnames(gapminder)
foot(gapminder)
tail(gapminder)
